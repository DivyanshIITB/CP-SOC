/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        
        vector<int> nums;
        list(root,nums);
        sort(nums);
        
        return nums[k-1];
    }


    void list(TreeNode* root, vector<int> &nums){
        if(root==nullptr) return;
        nums.push_back(root->val);
        list(root->left,nums);
        list(root->right,nums);
        }    

    void sort(vector<int> &nums){
        int n=nums.size();
        for(int i=1;i<n;i++){
            int curr=nums[i];
            for(int j=i-1;j>=0;j--){
                if(nums[j]>curr) swap(nums[j+1],nums[j]); 
            }        
        }
    }

    void swap(int &a,int &b){
        int temp=a;
        a=b;
        b=temp;
        return;
    }
};
