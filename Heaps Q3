//{ Driver Code Starts
//Initial function template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

int parent(int i) {
    return (i - 1) / 2;
}
int left(int i) {
    return ((2 * i) + 1);
}
int right(int i) {
    return ((2 * i) + 2);
}

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        vector <int> A;
        for(int i=l;i<=r;i++) A.push_back(arr[i]);
        heapsort(A,r+1);
        return A[k-1];        
    }
    
    void heapsort(vector<int> &A,int n){
        buildheap(A,n);
        int x=n;
        for(int i=n-1;i>=1;i--){
            swap(A[0],A[i]);
            x--;
            maxheapify(A,0,x);
        }

        
        
    }
    
    void buildheap(vector<int> &A,int n){     //n is the size of the array
        for(int i=(n-1)/2;i>=0;i--){
            maxheapify(A,i,n);
        }
        return;
    }
    
    void maxheapify(vector<int> &A, int i,int n){ 
        int maxIndex = i;
        int l = left(i);
    
        if (l <n  && A[l] > A[maxIndex]) {
            maxIndex = l;
        }
        int r = right(i);
    
        if (r < n && A[r] > A[maxIndex]) {
            maxIndex = r;
        }
        if (i != maxIndex) {
            swap(A[i], A[maxIndex]);
            maxheapify(A,maxIndex,n);
        }   
        return;
    }
    
    void swap(int &a,int &b){
        int temp=a;
        a=b;
        b=temp;
        return;
    }
    
    
};

//{ Driver Code Starts.
 
int main()
{
    int test_case;
    cin>>test_case;
    while(test_case--)
    {
        int number_of_elements;
        cin>>number_of_elements;
        int a[number_of_elements];
        
        for(int i=0;i<number_of_elements;i++)
            cin>>a[i];
            
        int k;
        cin>>k;
        Solution ob;
        cout<<ob.kthSmallest(a, 0, number_of_elements-1, k)<<endl;
    }
    return 0;
}
// } Driver Code Ends
