//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

int left(int i) {
    return ((2 * i) + 1);
}
int right(int i) {
    return ((2 * i) + 2);
}



class Solution {
  public:
    vector<int> maxCombinations(int N, int K, vector<int> &A, vector<int> &B) {
        
        vector<int> sum,ans;
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                int temp;
                temp=A[i]+B[j];
                sum.push_back(temp);
            }
        }
        if(sum.size()==1) return sum;
        heapsort(sum,N*N);
        for(int i=sum.size()-1;i>=sum.size()-K;i--) ans.push_back(sum[i]);
        return ans;
    }
    
    
        void heapsort(vector<int> &A,int n){
        buildheap(A,n);
        int x=n;
        for(int i=n-1;i>=1;i--){
            swap(A[0],A[i]);
            x--;
            maxheapify(A,0,x);
        }

        
        
    }
    
    void buildheap(vector<int> &A,int n){    
        for(int i=(n-1)/2;i>=0;i--){
            maxheapify(A,i,n);
        }
        return;
    }
    
    void maxheapify(vector<int> &A, int i,int n){ 
        int maxIndex = i;
        int l = left(i);
    
        if (l <n  && A[l] > A[maxIndex]) {
            maxIndex = l;
        }
        int r = right(i);
    
        if (r < n && A[r] > A[maxIndex]) {
            maxIndex = r;
        }
        if (i != maxIndex) {
            swap(A[i], A[maxIndex]);
            maxheapify(A,maxIndex,n);
        }   
        return;
    }
    
    void swap(int &a,int &b){
        int temp=a;
        a=b;
        b=temp;
        return;
    }

};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;

        vector<int> A(N), B(N);
        for (int i = 0; i < N; i++) {
            cin >> A[i];
        }
        for (int i = 0; i < N; i++) {
            cin >> B[i];
        }
        Solution obj;
        vector<int> ans = obj.maxCombinations(N, K, A, B);
        for (auto &it : ans) cout << it << ' ';
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
